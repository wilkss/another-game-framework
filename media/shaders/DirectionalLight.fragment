#version 330 core

#define MAX_SHADOW_CASCADES 4

in vec2 uv;

uniform sampler2D u_NormalTexture;
uniform sampler2D u_DepthTexture;
uniform sampler2DArray u_ShadowMapTexture;

uniform mat4 u_ViewMatrix;
uniform mat4 u_InverseViewProjectionMatrix;

uniform vec3 u_LightDirection;
uniform vec3 u_LightColor;

uniform int u_CascadeCount;
uniform float u_CascadeSplitDepths[MAX_SHADOW_CASCADES];
uniform mat4 u_CascadeSplitMatrices[MAX_SHADOW_CASCADES];

layout (location = 0) out vec4 out_Color;

vec3 ReconstructWorldPosFromDepth(float depth)
{
	float z = depth * 2.0 - 1.0;
	vec4 clipSpacePosition = vec4(uv * 2.0 - 1.0, z, 1.0);
	vec4 worldSpacePosition = u_InverseViewProjectionMatrix * clipSpacePosition;
	worldSpacePosition = worldSpacePosition / worldSpacePosition.w;
	return worldSpacePosition.xyz;
}

void main()
{
	vec3 normal = texture(u_NormalTexture, uv).rgb;
	float depth = texture(u_DepthTexture, uv).r;
	vec3 fragPos = ReconstructWorldPosFromDepth(depth);
	vec3 viewSpacePos = (u_ViewMatrix * vec4(fragPos, 1.0)).xyz;

	vec3 lightDir = normalize(-u_LightDirection);
	float NdotL = max(dot(normal, lightDir), 0.0);
	
	int cascadeIndex = 0;

	for (int i = 1; i <= u_CascadeCount; ++i)
	{
		if (viewSpacePos.z < u_CascadeSplitDepths[i - 1])
			cascadeIndex = i;
	}

	vec4 fragPosLightSpace = u_CascadeSplitMatrices[cascadeIndex] * vec4(fragPos, 1.0f);
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(u_ShadowMapTexture, vec3(projCoords.xy, float(cascadeIndex))).r;
	float currentDepth = projCoords.z;
	float bias = 0.005;
	float shadowFactor = currentDepth - bias > closestDepth ? 0.5 : 1.0;

	vec3 result = u_LightColor * NdotL * shadowFactor;
	out_Color = vec4(result, 1.0);
}